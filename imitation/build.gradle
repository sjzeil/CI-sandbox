plugins {
   id 'java'
   id "org.xbib.gradle.plugin.git" version "2.0.0"
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
}

test {
    ignoreFailures = true
    useJUnitPlatform()
}

task reports (dependsOn: ['javadoc', 'test']) {}

////////  Website publication on GitHub pages ///////////////////


task clonePages() { 
    doLast {
        mkdir 'build/gh-pages'
        def thisRepo = rootProject.projectDir.toString() + '/..'
        def pagesDir = "$buildDir/gh-pages"
        project.delete {
            delete pagesDir
        }
        def grgit = git.clone {
            dir = pagesDir
            uri = 'file:' + thisRepo
            bare = false
            refToCheckout = 'gh-pages'
        }
        grgit.checkout {
            branch = 'gh-pages'
        }
        grgit.close()
    }
}

task copyReports (type: Copy, dependsOn: ['reports', 'clonePages']) {  
    from "$buildDir/reports"
    into "$buildDir/gh-pages"
}

task copyJavadocs (type: Copy, dependsOn: ['reports', 'clonePages']) {  
    from "$buildDir/docs"
    into "$buildDir/gh-pages"
}

task copyStaticContent (type: Copy, dependsOn: ['reports', 'clonePages']) {  
    from "src/main/html"
    into "$buildDir/gh-pages"
}

task updateGHPages (dependsOn: ['copyReports', 'copyJavadocs', 'copyStaticContent']) {
    group = "Reporting"
    description  'Copies reports to the gh-pages branch in preparation for a future push to GitHub'
    doLast {
        def pagesDir = "$buildDir/gh-pages"
        exec {
            workingDir = '.'
            commandLine = ['ls', '-a', 'build/gh-pages']
        }
        def grgit = git.open {
            dir = pagesDir
        }
        grgit.add (update: false, patterns: ['javadoc', 'tests', 'index.md'])
        grgit.add (update: true, patterns: ['javadoc', 'tests', 'index.md'])
        grgit.commit {
            message = "Updating web pages"
        }
        grgit.push {}
        grgit.close()
    }
}

task deployReports (dependsOn: 'updateGHPages') {
    doLast {
        exec {
            workingDir ='.'
            commandLine = ['git', 'push', 'origin', 'gh-pages']
        }
    }
}
