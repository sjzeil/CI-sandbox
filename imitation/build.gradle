plugins {
   id 'java'
   id 'org.ajoberstar.git-publish' version '4.2.2'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
}

test {
    ignoreFailures = true
    useJUnitPlatform()
}

task timeStamp {
    outputs.file  "build/reports/timeStamp.md"
    doLast {
        Date now = new Date()
        FileWriter out = new FileWriter("build/reports/timeStamp.md")
        out.write("---\n")
        out.write("title: Time stamp\n")
        out.write("layout: post\n")
        out.write("---\n")
        out.write("# Generated at\n\n" + now + "\n")
        out.close()
        println "The timestamp is " + now
    }
}

task reports (dependsOn: ['javadoc', 'test', 'timeStamp']) {}

////////  Website publication on GitHub pages ///////////////////

def pagesDir = file("${project.rootDir}/../website-temp").absolutePath

task clearPages(type: Delete) {
    delete pagesDir
}

task workTree(dependsOn: ['clearPages']) { 
    doLast {
        exec {
            workingDir = '.'
            commandLine = ['git', 'worktree', 'add', '-f', pagesDir, 'gh-pages']
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'checkout', 'gh-pages']
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'pull']
        }
    }
}


task copyReports (type: Copy, dependsOn: ['reports', 'workTree']) {
    from 'build/reports'
    into pagesDir
}

task copyDocs (type: Copy, dependsOn: ['javadoc', 'workTree']) {
    from 'build/docs'
    into 'build/reports'
}

task reports (dependsOn: ['copyDocs', 'test', 'timeStamp']) {}

////////  Website publication on GitHub pages ///////////////////


gitPublishCopy.dependsOn reports
gitPublish {
    // the repository
    repoUri = 'git@github.com:sjzeil/CI-sandbox.git'

    // branch in which to publish
    branch = 'gh-pages'
  
    // what to publish
    contents {
        from 'imitation/build/reports'
    }

}

task pushWebsite (type: Exec, dependsOn: 'commitWebsite') {
    workingDir = pagesDir
    commandLine = ['git', 'push']
    ignoreExitValue = true
}

task deployReports (type: Delete, dependsOn: 'pushWebsite') {
    group = "Reporting"
    description  'Commit and push website changes to GitHub'
    delete pagesDir
}

task dirList {
    doLast {
    println  "Root project:   ${project.rootProject}";
    println  "  rootDir:      ${project.rootDir}"
    println  "  projectDir:   ${project.projectDir}";
    println  "  project dir:  ${System.getProperty("user.dir")}";
    }
}